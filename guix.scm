;; from user https://www.reddit.com/u/PetriciaKerman/
;; https://www.reddit.com/r/GUIX/s/ICNi2epcaP
;;(use-modules (guix packages))

(define-module (gnu packages bioinformatics)
  #:use-module ((guix licenses) #:prefix license:)
  #:use-module (guix packages)
  #:use-module (guix utils)
  #:use-module (guix download)
  #:use-module (guix git-download)
  #:use-module (guix hg-download)
  #:use-module (guix build-system ant)
  #:use-module (guix build-system gnu)
;;  #:use-module (guix build-system cmake)
;;  #:use-module (guix build-system go)
;;  #:use-module (guix build-system haskell)
;;  #:use-module (guix build-system meson)
;;  #:use-module (guix build-system ocaml)
  ;;#:use-module (guix build-system perl)
  ;; #:use-module (guix build-system python)
  ;; #:use-module (guix build-system qt)
  ;; #:use-module (guix build-system r)
  ;; #:use-module (guix build-system ruby)
  ;; #:use-module (guix build-system scons)
  ;; #:use-module (guix build-system trivial)
  #:use-module (guix deprecation)
  #:use-module (gnu packages)
  ;; #:use-module (gnu packages assembly)
  ;; #:use-module (gnu packages autotools)
  ;; #:use-module (gnu packages algebra)
  ;; #:use-module (gnu packages base)
  ;; #:use-module (gnu packages bash)
  ;; #:use-module (gnu packages bison)
  ;; #:use-module (gnu packages bioconductor)
  ;; #:use-module (gnu packages boost)
  ;; #:use-module (gnu packages check)
  ;; #:use-module (gnu packages code)
  ;; #:use-module (gnu packages commencement)
  ;; #:use-module (gnu packages cmake)
  ;; #:use-module (gnu packages compression)
  ;; #:use-module (gnu packages cpio)
  ;; #:use-module (gnu packages cran)
  ;; #:use-module (gnu packages curl)
  ;; #:use-module (gnu packages documentation)
  ;; #:use-module (gnu packages databases)
  ;; #:use-module (gnu packages datastructures)
  ;; #:use-module (gnu packages dlang)
  ;; #:use-module (gnu packages file)
  ;; #:use-module (gnu packages flex)
  ;; #:use-module (gnu packages gawk)
  ;; #:use-module (gnu packages gcc)
  ;; #:use-module (gnu packages gd)
  ;; #:use-module (gnu packages golang)
  ;; #:use-module (gnu packages glib)
  ;; #:use-module (gnu packages graph)
  ;; #:use-module (gnu packages graphics)
  ;; #:use-module (gnu packages graphviz)
  ;; #:use-module (gnu packages groff)
  ;; #:use-module (gnu packages gtk)
  ;; #:use-module (gnu packages guile)
  ;; #:use-module (gnu packages guile-xyz)
  ;; #:use-module (gnu packages haskell-check)
  ;; #:use-module (gnu packages haskell-web)
  ;; #:use-module (gnu packages haskell-xyz)
  ;; #:use-module (gnu packages image)
  ;; #:use-module (gnu packages image-processing)
  ;; #:use-module (gnu packages imagemagick)
  #:use-module (gnu packages java)
  #:use-module (gnu packages java-compression)
  #:use-module (gnu packages jemalloc)
  ;; #:use-module (gnu packages linux)
  ;; #:use-module (gnu packages lisp-xyz)
  ;; #:use-module (gnu packages logging)
  ;; #:use-module (gnu packages machine-learning)
  ;; #:use-module (gnu packages man)
  ;; #:use-module (gnu packages maths)
  ;; #:use-module (gnu packages mpi)
  ;; #:use-module (gnu packages ncurses)
  ;; #:use-module (gnu packages node)
  ;; #:use-module (gnu packages ocaml)
  ;; #:use-module (gnu packages pcre)
  ;; #:use-module (gnu packages parallel)
  ;; #:use-module (gnu packages pdf)
  ;; #:use-module (gnu packages perl)
  ;; #:use-module (gnu packages perl-check)
  ;; #:use-module (gnu packages pkg-config)
  ;; #:use-module (gnu packages popt)
  ;; #:use-module (gnu packages protobuf)
  ;; #:use-module (gnu packages python)
  ;; #:use-module (gnu packages python-check)
  ;; #:use-module (gnu packages python-compression)
  ;; #:use-module (gnu packages python-science)
  ;; #:use-module (gnu packages python-web)
  ;; #:use-module (gnu packages python-xyz)
  ;; #:use-module (gnu packages qt)
  ;; #:use-module (gnu packages rdf)
  ;; #:use-module (gnu packages readline)
  ;; #:use-module (gnu packages ruby)
  ;; #:use-module (gnu packages serialization)
  ;; #:use-module (gnu packages shells)
  ;; #:use-module (gnu packages sphinx)
  ;; #:use-module (gnu packages statistics)
  ;; #:use-module (gnu packages swig)
  ;; #:use-module (gnu packages tbb)
  ;; #:use-module (gnu packages tex)
  ;; #:use-module (gnu packages texinfo)
  ;; #:use-module (gnu packages textutils)
  ;; #:use-module (gnu packages time)
  ;; #:use-module (gnu packages tls)
  ;; #:use-module (gnu packages vim)
  ;; #:use-module (gnu packages web)
  ;; #:use-module (gnu packages xml)
  ;; #:use-module (gnu packages xorg)
  #:use-module (guix gexp)
  #:use-module (srfi srfi-1)
  #:use-module (srfi srfi-26)
  #:use-module (ice-9 match))

;; (define-module (gnu packages version-control)
;;   #:use-module ((guix licenses) #:prefix license:)
;;   #:use-module (guix utils)
;;   #:use-module (guix packages)
;;   #:use-module (guix gexp)
;;   #:use-module (guix git-download)
;;   #:use-module (guix build-system ant)
;;   #:use-module (gnu packages compression)
;;   #:use-module (gnu packages pkg-config)
;;   #:use-module (gnu packages java)
  
;; ;;  #:use-module (gnu packages git-minimal)
;;   #:use-module (gnu packages version-control)
;; ;;  #:use-module (gnu packages icedtea)
;; ;;  #:use-module (gnu packages ssh)
;; ;;  #:use-module (gnu packages tls)
;;   ;;  #:use-module (gnu packages web)
;;   )

;;ll (use-modules
;;  (ice-9 popen)
;;  (ice-9 rdelim)
;;  (guix build utils)
;;  (guix gexp)
;;  (guix git-download)
;;  (guix packages)
;;  (guix licenses)
;;  (gnu packages pkg-config)
;;  (guix build-system ant)
;;  )

(define-public yacy
  (package
    (name "yacy")
    (version "1.92")
    (home-page "https://yacy.net")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                    (url "https://github.com/yacy/yacy_search_server")
                    (commit "Release_1.92")))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "0640mykdd7fbgg547kyqja642ibdj5kq23c8i02a0ffk1hnc50yy"))))
    (build-system ant-build-system)
    (arguments
     `(#:build-target "all"
       #:tests? #f
       #:phases
       ,#~(modify-phases %standard-phases
            (add-after 'unpack 'patch-yacy-script
              (lambda* _
                (substitute* "startYACY.sh"
                  (("JAVA=.+$")
                   (string-append "JAVA=" #$(file-append icedtea "/bin/java\n")))))))))
    (inputs
     (list icedtea))
    (synopsis "Search engine application.")
    (description "YaCy is a full search engine application containing a server
hosting a search index, a web application to provide a nice user front-end for
searches and index creation and a production-ready web crawler with a
scheduler to keep a search index fresh.")
    (license license:lgpl2.1+)
    ))
;; ```

;; This this "works" the only problem is the build system doesn't have a proper installation target. The authors figured you would just build it in some location, on the target machine and run it from there. `./pre-inst-env guix shell -D yacy` give you enough to run `ant clean all && ./startYACY.sh` which lets me visit the search engine in my browser (very cool btw!)

;; I'll leave it as an exercise for you to figure out what needs to be done for the install phase. It may just be copying everything to the output and calling it a day.

yacy
